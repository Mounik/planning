#!/usr/bin/env python3
"""
Script de d√©marrage pour la production avec Gunicorn
"""
import os
import sys
import subprocess
from pathlib import Path

def check_dependencies():
    """V√©rifie que les d√©pendances sont install√©es"""
    try:
        import gunicorn
        print("‚úÖ Gunicorn install√©")
    except ImportError:
        print("‚ùå Gunicorn n'est pas install√©. Ex√©cutez: uv add gunicorn")
        sys.exit(1)

def setup_environment():
    """Configure l'environnement de production"""
    # Variables d'environnement par d√©faut pour la production
    production_env = {
        'DEBUG': 'false',
        'FLASK_ENV': 'production',
        'SECURITY_HEADERS': 'true',
        'SESSION_COOKIE_SECURE': 'false',  # Mettre √† true avec HTTPS
        'FORCE_HTTPS': 'false',  # Mettre √† true en production avec HTTPS
        'CSRF_SSL_STRICT': 'false',  # Mettre √† true avec HTTPS
    }

    # Appliquer les variables d'environnement
    for key, value in production_env.items():
        if key not in os.environ:
            os.environ[key] = value

    # V√©rifier SECRET_KEY
    if not os.environ.get('SECRET_KEY'):
        print("‚ö†Ô∏è  WARNING: SECRET_KEY n'est pas d√©fini!")
        print("   G√©n√©rez une cl√© secr√®te avec: python -c 'import secrets; print(secrets.token_urlsafe(32))'")
        print("   Puis ajoutez-la √† votre fichier .env: SECRET_KEY=votre_cle_secrete")

def create_directories():
    """Cr√©e les r√©pertoires n√©cessaires"""
    data_dir = Path('data')
    data_dir.mkdir(exist_ok=True)

    # Cr√©er les fichiers de log
    (data_dir / 'access.log').touch()
    (data_dir / 'error.log').touch()
    (data_dir / 'security.log').touch()

    print("‚úÖ R√©pertoires et fichiers de log cr√©√©s")

def run_gunicorn():
    """Lance Gunicorn avec la configuration de production"""
    cmd = [
        'gunicorn',
        '--config', 'gunicorn_config.py',
        'src.planning_pro.app:app'
    ]

    print("üöÄ D√©marrage de l'application en mode production...")
    print("üìç Application disponible sur: http://127.0.0.1:5000")
    print("üìã Logs disponibles dans le r√©pertoire 'data/'")
    print("‚èπÔ∏è  Appuyez sur Ctrl+C pour arr√™ter")

    try:
        subprocess.run(cmd, check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors du d√©marrage: {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\nüõë Arr√™t de l'application...")

def main():
    """Fonction principale"""
    print("üîß Configuration de l'environnement de production...")

    check_dependencies()
    setup_environment()
    create_directories()

    print("\n" + "="*50)
    print("üöÄ D√âMARRAGE EN MODE PRODUCTION")
    print("="*50)

    run_gunicorn()

if __name__ == "__main__":
    main()